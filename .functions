# send text message via cli 
text() {
	  curl http://textbelt.com/text -d number="$1" -d "message=$2"                                             
}
# create grunt watch boilerplate sandbox for quick web tests
function sandbox {
	git clone git@github.com:d48/grunt-watch-boilerplate "$1"
	cd "$1"
	npm install && npm start
}
# JSDoc Local Build Function
# Changes to jsdoc directory, recursive force deletes current output
function jdoc { 
	cd ~/jsdoc-master; rm -rf out/*; ./jsdoc -r --verbose -c ~/jsdoc-master/conf.json --verbose /Volumes/CRyanOnVM/Development/BL/Web/FCS/Desktop/App/assets/global/ -t templates/granite; 
}

# JSDoc Debug Function
# Changes to jsdoc directory, recursive force deletes current output, turns on debug mode
function jdocdebug { 
	cd ~/jsdoc-master; rm -rf out/*; ./jsdoc --debug -r -c ~/jsdoc-master/conf.json --verbose /Volumes/CRyanOnVM/Development/BL/Web/FCS/Desktop/App/assets/global/ -t templates/granite; 
}

# Create html file with default script tags for local testing 
# file named from parameter
function hj() {
	cp ~/scripts/create-htmljs.html "$1".html
}

# cp a backup file passed in and append suffix of .bak
function bu() {
	cp "$1"{,.bak}
}
# outputs file passed through in pretty json format
function js() {
	cat "$1" | json
}
 
# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}


# find shorthand
function f() {
    find . -name "$1"
}


# lets toss an image onto my server and pbcopy that bitch.
function scpp() {
    scp "$1" design48host@design48.net:~/html/i;
    echo "http://design48.net/i/$1" | pbcopy;
    echo "Copied to clipboard: http://design48.net/i/$1"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	open "http://localhost:${port}/"
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# git log with per-commit cmd-clickable GitHub URLs (iTerm)
# function gf() {
#   local remote="$(git remote -v | awk '/^origin.*\(push\)$/ {print $2}')"
#   [[ "$remote" ]] || return
#   local user_repo="$(echo "$remote" | perl -pe 's/.*://;s/\.git$//')"
#   git log $* --name-status --color | awk "$(cat <<AWK
#     /^.*commit [0-9a-f]{40}/ {sha=substr(\$2,1,7)}
#     /^[MA]\t/ {printf "%s\thttps://github.com/$user_repo/blob/%s/%s\n", \$1, sha, \$2; next}
#     /.*/ {print \$0}
# AWK
#   )" | less -F
# }


# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}


# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
function json() {
	if [ -p /dev/stdin ]; then
		# piping, e.g. `echo '{"foo":42}' | json`
		python -mjson.tool | pygmentize -l javascript
	else
		# e.g. `json '{"foo":42}'`
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	fi
}


# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
	mkdir -p "$1"
	git archive master | tar -x -C "$1"
}



# get gzipped size
function gz() {
	echo "orig size    (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}

# Extract archives - use: extract <file>
# Credits to http://dotfiles.org/~pseup/.bashrc
function extract() {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2) tar xjf $1 ;;
			*.tar.gz) tar xzf $1 ;;
			*.bz2) bunzip2 $1 ;;
			*.rar) rar x $1 ;;
			*.gz) gunzip $1 ;;
			*.tar) tar xf $1 ;;
			*.tbz2) tar xjf $1 ;;
			*.tgz) tar xzf $1 ;;
			*.zip) unzip $1 ;;
			*.Z) uncompress $1 ;;
			*.7z) 7z x $1 ;;
			*) echo "'$1' cannot be extracted via extract()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

function gitshots() {
	# run ruby file in home directory
	~/scripts/gitshots-hook.sh	
}

# get definition of a word
function define() {
   source ~/scripts/dict.sh	
}

# output tmux colours
function tmuxcolours {
	for i in {0..255} ; do
		printf "\x1b[38;5;${i}mcolour${i}\n"
	done
}
